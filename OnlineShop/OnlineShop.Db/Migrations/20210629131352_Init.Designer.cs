// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Db;

namespace OnlineShop.Db.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210629131352_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineShop.Db.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.ComparingProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ComparingProducts");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.FavoriteProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e0b866f-7698-43c9-a35c-d718ca19444f"),
                            Cost = 3000m,
                            Description = "Все модели оснащены легкими пропускными кольцами, опоры которых имеют форму, препятствующую захлестам. Оригинальные катушкодержатели удобно лежат в руке и обеспечивают максимальную тактильную чувствительность.",
                            ImagePath = "https://fmagazin.ru/_files/editor/images/pic/herakles/spinning_herakles_red_creek_ml_1_98m_5_20g_m.jpg",
                            Name = "Спиннинг"
                        },
                        new
                        {
                            Id = new Guid("91cad72c-c9b5-4ead-bfbe-3983aad7d9dc"),
                            Cost = 4000m,
                            Description = "Легкий корпус из высокопрочного пластика, плавный равномерный ход и замечательные тяговые характеристики. Моментальный антиреверс. Алюминиевая шпуля с насечкой и коническим буртиком.",
                            ImagePath = "https://fmagazin.ru/_files/editor/images/pic/volzhanka/katushka_volzhanka_tajfun_5500_m.jpg",
                            Name = "Катушка"
                        },
                        new
                        {
                            Id = new Guid("85dd3eb6-c430-4d65-b1b9-88b05c444699"),
                            Cost = 500m,
                            Description = "Плетеный шнур изготовленный по технологии четырехжильного плетения – две жилы из высокомолекулярного полиэтилена, две – из полиэстера",
                            ImagePath = "https://fmagazin.ru/_files/editor/images/pic/sunline/monofilnaya_leska/leska_sunline_bass_special_100m_0_190mm_jungle_green_m.jpg",
                            Name = "Леска"
                        },
                        new
                        {
                            Id = new Guid("095b246b-0c6f-4c7c-bd85-433b320af18b"),
                            Cost = 10000m,
                            Description = "Дальность работы:50 метров Глубина сканирования:50 метров Луч сканирования:40 градусов GPS модуль:Нет Вес:65 грамм",
                            ImagePath = "https://rusonar.ru/upload/medialibrary/331/33179e13dd1369b9f82a1c162fd8c6b0.png",
                            Name = "Эхолот"
                        },
                        new
                        {
                            Id = new Guid("077f2292-a056-41d1-b7f0-32e33c269ecd"),
                            Cost = 15000m,
                            Description = "Регулируемые по высоте опоры позволяют удобно расположиться практически на любом берегу, а сиденье, вращающееся на 360 градусов, обеспечит комфортную рыбалку без усталости спины.",
                            ImagePath = "https://cdn1.ozone.ru/s3/multimedia-4/c500/6018863824.jpg",
                            Name = "Рыболовное кресло"
                        },
                        new
                        {
                            Id = new Guid("a535f549-d5b3-4ed1-a8f5-eee3f527d70e"),
                            Cost = 150m,
                            Description = "Подойдёт для ловли как в озёрах, так и в небольших каналах и медленно текущих реках. Отлично держится в кормушке.",
                            ImagePath = "https://images.spinningline.ru/00127414_LARGE-001.jpg",
                            Name = "Прикормка"
                        },
                        new
                        {
                            Id = new Guid("357d13c5-c6d4-4ebf-9c02-92b41588ff87"),
                            Cost = 2000m,
                            Description = "Сигнализатор имеет влагозащиту, что позволяет использовать его в самых суровых условиях.",
                            ImagePath = "https://fmagazin.ru/_files/editor/images/pic/anaconda/komplekt_signalizatorov_s_pejdzherom_anaconda_tsr_2_way_set_2_1_red_green_m.jpg",
                            Name = "Комплект сигнализаторов поклёвки"
                        },
                        new
                        {
                            Id = new Guid("52a4300f-03c7-44fd-9154-e4dbb779dfa0"),
                            Cost = 100m,
                            Description = "Поплавки Iron Trout Trolling Float идеально подходят для ловли форели в проводку с яркими шариками на дальней дистанции",
                            ImagePath = "https://fmagazin.ru/_files/editor/images/pic/colmic/poplavok_colmic_cooper_1g_m.jpg",
                            Name = "Поплавок"
                        },
                        new
                        {
                            Id = new Guid("e161a181-cf56-4faf-9c20-bc70ec31bc70"),
                            Cost = 800m,
                            Description = "Рюкзак имеет основное отделение, куда помещаются коробки с инструментами и приманками, дополнительное отделение, два боковых кармана для размещения бутылок с водой или другого груза.",
                            ImagePath = "https://fmagazin.ru/_files/editor/images/pic/rap/ryukzak_rapala_jungle_rjubp_m.jpg",
                            Name = "Рюкзак"
                        },
                        new
                        {
                            Id = new Guid("36c71706-0ad1-4042-ad47-7e05b3220bee"),
                            Cost = 2500m,
                            Description = "Включает в себя нож, пассатижи, отвертки, штопор и.т.д. Все, кроме декоративных пластмассовых накладок, выполнено из нержавеющей стали.",
                            ImagePath = "https://fmagazin.ru/_files/editor/images/pic/aqua/nozh_skladnoj_aqua_ak_p802_m.jpg",
                            Name = "Нож складной"
                        },
                        new
                        {
                            Id = new Guid("1118276f-27ab-43b3-b8ec-dc373bb0b639"),
                            Cost = 600m,
                            Description = "В поворотном отражателе этого налобного фонаря собраны 6 LED SMD-светодиодов. Они создают равномерный яркий свет для освещения объектов на переднем и среднем планах в темноте.",
                            ImagePath = "https://fmagazin.ru/_files/editor/images/pic/sledopyt/fonar_nalobnyj_sibirskij_sledopyt_lyuminofor_m.jpg",
                            Name = "Фонарь налобный"
                        },
                        new
                        {
                            Id = new Guid("ee40557c-c632-407d-b69d-21d846dc33d2"),
                            Cost = 300m,
                            Description = "Матовая чёрная поверхность не бликует на солнце, а контрастная шкала облегчает замер при слабом освещении. Корпус и линза весов выполнены их прочных композитных материалов, а подвес и крюк для взвешивания – из нержавеющей стали.",
                            ImagePath = "https://fmagazin.ru/_files/editor/images/pic/prologic/vesy_mekhanicheskie_prologic_specimen_dial_scale_60lbs_27kg_m.jpg",
                            Name = "Весы"
                        });
                });

            modelBuilder.Entity("OnlineShop.Db.Models.UserDeliveryInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<int>("House")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatronymicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserDeliveryInfo");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.CartItem", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId");

                    b.HasOne("OnlineShop.Db.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.ComparingProduct", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.FavoriteProduct", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.UserDeliveryInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
